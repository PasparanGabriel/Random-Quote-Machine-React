{"version":3,"sources":["date/quotes.js","utils/utils.js","components/Text.js","components/Hr.js","components/Author.js","components/Tweet.js","components/NewQuote.js","Quote.js","serviceWorker.js","index.js"],"names":["quotes","text","author","getRandom","Math","floor","random","length","Text","props","react_default","a","createElement","className","id","Hr","Author","Tweet","href","concat","tweet","target","rel","NewQuote","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","onClick","React","Component","Quote","index","state","setState","components_Text","components_Hr","components_Author","components_NewQuote","components_Tweet","encodeURI","Boolean","window","location","hostname","match","ReactDOM","render","src_Quote","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27d069ca.chunk.js","sourcesContent":["const quotes = [\r\n    {\r\n        text: \"If you're not making mistakes, then you're not making decisions.\",\r\n        author: \"Catherine Cook\"\r\n    },\r\n    {\r\n        text: \"Always remember that you are absolutely unique. Just like everyone else.\",\r\n        author: \"Margaret Mead\"\r\n    },\r\n    {\r\n        text: \"Forget safety. Live where you fear to live. Destroy your reputation. Be notorious.\",\r\n        author: \"Rumi\"\r\n    },\r\n    {\r\n        text: \"Anyone who has never made a mistake has never tried anything new.\",\r\n        author: \"Albert Einstein\"\r\n    },\r\n    {\r\n        text: \"Quality is not an act, it is a habit.\",\r\n        author: \"Aristotle\"\r\n    },\r\n    {\r\n        text: \"Independence is happiness.\",\r\n        author: \"Susan B. Anthony\"\r\n    },\r\n    {\r\n        text: \"Never memorize something that you can look up.\",\r\n        author: \"Albert Einstein\"\r\n    },\r\n    {\r\n        text: \"We are what we believe we are.\",\r\n        author: \"C. S. Lewis\"\r\n    },\r\n    {\r\n        text: \"The way to get started is to quit talking and begin doing.\",\r\n        author: \"Walt Disney\"\r\n    },\r\n    {\r\n        text: \"It always seems impossible until it's done.\",\r\n        author: \"Nelson Mandela\"\r\n    }\r\n];\r\n\r\nexport default quotes;\r\n","import quotes from '../date/quotes';\r\n\r\nconst getRandom = function() {\r\n\r\n    return Math.floor((Math.random() * quotes.length));\r\n};\r\n\r\nexport default getRandom;\r\n","import React from 'react';\r\n\r\nconst Text = props => {\r\n\r\n    return (<p className=\"text-justify\" id=\"text\">{props.text}</p>);\r\n};\r\n\r\nexport default Text;\r\n","import React from 'react';\r\n\r\nconst Hr = () => {\r\n\r\n    return (<hr className=\"bg-dark\"/>);\r\n};\r\n\r\nexport default Hr;\r\n","import React from 'react';\r\n\r\nconst Author = props => {\r\n\r\n    return (<blockquote className=\"text-justify\" id=\"author\">- {props.text}</blockquote>);\r\n};\r\n\r\nexport default Author;\r\n","import React from 'react';\r\n\r\nconst Tweet = props => {\r\n\r\n    return (\r\n        <a  id=\"tweet-quote\"\r\n            className=\"btn btn-success float-right\"\r\n            href={\"https://www.twitter.com/intent/tweet\".concat(props.tweet)}\r\n            target=\"_blank\" rel=\"noopener noreferrer\">\r\n\r\n            <i className=\"fas fa-share\"></i> Tweet quote\r\n        </a>\r\n    );\r\n};\r\n\r\nexport default Tweet;\r\n","import React from 'react';\r\n\r\nclass NewQuote extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    handleClick = () => {\r\n        this.props.handleClick();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <button onClick={this.handleClick} className=\"btn btn-success\" id=\"new-quote\">\r\n                <i className=\"fas fa-redo\"></i> New quote\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewQuote;\r\n","import React from 'react';\r\nimport quotes from './date/quotes';\r\nimport getRandom from './utils/utils';\r\nimport Text from './components/Text';\r\nimport Hr from './components/Hr';\r\nimport Author from './components/Author';\r\nimport Tweet from './components/Tweet';\r\nimport NewQuote from './components/NewQuote';\r\n\r\nclass Quote extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            text: \"If you're not making mistakes, then you're not making decisions.\",\r\n            author: \"Catherine Cook\"\r\n        };\r\n    }\r\n\r\n    handleClick = () => {  \r\n        let index;\r\n        \r\n        do {\r\n            index = getRandom();\r\n        }\r\n        while (this.state.text === quotes[index].text);\r\n                 \r\n        this.setState(() => ({\r\n            text: quotes[index].text,\r\n            author: quotes[index].author\r\n        }));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"quote-box\">\r\n                <Text text={this.state.text} />\r\n                <Hr />\r\n                <Author text={this.state.author} />\r\n\r\n                <div id=\"action\">\r\n                    <NewQuote handleClick={this.handleClick} />\r\n                    <Tweet tweet={encodeURI(\"?text=\".concat(this.state.text))} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quote;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. Quote is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/style.css';\r\nimport Quote from './Quote';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Quote />, document.getElementById('app'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}